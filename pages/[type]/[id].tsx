import React from 'react';
import MovieDetailHeader from '@/components/MovieDetailHeader/MovieDetailHeader';
import { GetStaticProps, GetStaticPaths, GetStaticPropsContext } from 'next';
import Head from 'next/head'
import { setMovieInfo } from '@/features/MovieInfoSlice';
import { useDispatch, useSelector } from 'react-redux';
import ModalVideo from '@/components/ModalVideo/ModalVideo';
import { RootState } from '@/store/store';
import MovieDetailContent from '@/components/MovieDetailContent/MovieDetailContent';
import { ThunkDispatch } from '@reduxjs/toolkit';

function MovieDetail(props: any) {
    const modalTrailers = useSelector<RootState, boolean>(state => state.movieSlice.isModalTrailers)
    const dispatch = useDispatch<ThunkDispatch<any, any, any>>()

    if (!props?.data?.id) return
    if (props?.data?.id) {
        dispatch(setMovieInfo(props.data))
    }

    return (
        <>
            <Head>
                <title>{`${props.data.original_title || props.data.original_name} - The Movie Database (TMDB)`}</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div>
                <MovieDetailHeader />
                <MovieDetailContent />
            </div>
            {modalTrailers && <ModalVideo />}
        </>
    );
}

export default MovieDetail;

export const getStaticPaths: GetStaticPaths = () => {
    return {
        paths: [],
        fallback: true,
    }
}

export const getStaticProps: GetStaticProps = async (ctx: GetStaticPropsContext) => {
    const { type, id }: any = ctx.params
    const result = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL_MOVIEDB}${type}/${id}?api_key=${process.env.NEXT_PUBLIC_MOVIE_API_KEY}&language=en-US`)
    const data = await result.json()
    return {
        props: {
            data
        }
    }
}